Projects have ...
Users have ...
Projects <-> Users is a many-to-many relation called Members



API:

GET("/project/private", "project.controller:getAllPrivate");
GET("/project/private/{id}", "project.controller:getPrivate");
GET("/project", "project.controller:getAll");
GET("/project/{id}", "project.controller:get");
GET("/project/exists/{projectCode}", "project.controller:projectCodeIsAvailable");
POST("/users/{login}/projects", "user.controller:getProjectsAccess");
GET("/users/exists/{username}", "user.controller:usernameIsAvailable");
POST("/users", "user.controller:create");
PUT("/users", "user.controller:update");

getAllPrivate was "Project::$connection = 'private'" then do getAll()
getAll was return id,identifier,created_on,name,type for all projects
  type is a calculated value
getPrivate was "Project::$connection = 'private'" then do get()
get was get by id then return the full set of project fields
projectCodeIsAvailable was *backwards* from what the API ("exists") implies!

user:getProjectsAccess was find user by login (username), check password in the JSON request, look up roles (contributor was 3, manager was 4).
  Do SQL by either (user_id = ? and role_id = ?) if role specified, or (user_id = ?) if role not specified
  SELECT projects.identifier,projects.name,members.user_id,members.role_id FROM projects JOIN members ON condition
  (i.e., get project id and name for all projects that I'm a member of, maybe with the given role)
user:usernameIsAvailable was *backwards* from what the API ("exists") implies!
user:create checks whether username or email already exist, and makes sure email address is a valid address
  (it used PHP's FILTER_VALIDATE_EMAIL, but we'll use C#'s System.Net.Mail.MailAddress - if the constructor doesn't throw FormatException, it's valid)
  It then creates the user with *only* the fields login,hashed_password,mail,created_on (BTW, the password hash is SHA1 with no salt)
user:update

Saturn controllers:

index = GET /
show = GET /:id
add = GET /add
edit = GET /:id/edit
create = POST /
update = POST /:id -and- PUT /:id
patch = PATCH /:id
delete = DELETE /:id
delete_all = DELETE /


Controller for /project/private
Controller for /project


401 unauthorized should have "Scheme": "Bearer" and "Realm": "Language Depot"  (or perhaps without space)


UI should:

* Let you select a project
* Project page lists membership, lets you add or remove (remove with a little trashcan button that shows up on hover)
* Also lets you edit membership (change someone's role)
* Adding user has a user-search typeahead that searches by name or email
* Let you select a user
* User page shows projects they're a member of, and their role in the project
* You can remove them from a project here as well
* There's also a button to remove them from *all* projects
* Can add the user to a project from this page too, with a project search typeahead

Also, looking up users looks in both MySQL and Mongo and says whether they're found in one, the other, or both


I would add

/projects/:id/members
/projects/:id/managers

/users/:id/projects (already there - getProjectsAccess)

I would add:

PATCH /projects/:id/users -> {"add": ["rmunn"]} or {"remove": ["rmunn"]}




Content from https://docs.google.com/document/d/1MqXrJPGGF7xhb8WdMYXoyJTJMx-MA1kp8kOF1ki0bMY/edit#heading=h.f1lc5l9dgjcl after discussion today (2019-08-13):

API Methods
GET /api/v2/project/private - Returns all private projects, but only fields id,identifier,created_on,name,type

GET /api/v2/project/private/{projId} - Returns one private project identified by the project code (all fields included)

GET /api/v2/project - Same as before: Returns all public projects, but only fields id,identifier,created_on,name,type

GET /api/v2/project/{projId} - Same as before: Returns one public project identified by the project code (all fields included)

GET /api/v2/project/exists/{projId} - Returns FALSE if project does NOT exist, returns TRUE if project exists. This is the opposite of what the old API did.

GET /api/v2/users/exists/{username} - Returns FALSE if user does NOT exist, returns TRUE if user exists. This is the opposite of what the old API did.

POST /api/v2/users/{username}/projects - Same as before: Validates user’s password, then returns list of projects user is member of (optionally filtered by role in project)

POST /api/v2/users - Same as before: Creates a new user account from fields in the POST request. Error if user already exists.


PUT /api/v2/users/{username} - Almost the same as before: Updates an existing user account from fields in the PUT request. BUT where the old API returned an error if user does not exist, the new API will accept a PUT request for a username that does not exist, as long as enough fields are specified for the user to be valid. See https://stackoverflow.com/questions/630453/put-vs-post-in-rest for why.

PATCH /api/v2/users/{username} - This will be used to update a user’s password
POST /api/v2/users/{username}/verify-password - Used when LF logs in, to check password against MySQL and Mongo and migrate the user if passwords match (TODO: Flesh out this note and put in the Google doc)
POST /api/v2/projects - Same as before: Creates a new project from fields in the POST request.


PUT /api/v2/users - Almost the same as before: Updates an existing user account from fields in the PUT request. BUT where the old API returned an error if user does not exist, the new API will accept a PUT request for a username that does not exist, as long as enough fields are specified for the user to be valid. See https://stackoverflow.com/questions/630453/put-vs-post-in-rest for why.

POST /api/v2/project/{projId}/add-user/{username} - NEW: Validates a username/password pair in the POST message, which must be of someone with admin rights to the project (either a project manager or a site admin, for example). If validation successful, adds user to project. If user was already a member of the project, no action is taken, but no error is returned: client code sees this as a successful operation.

TASK: Decide whether API should be addUser, or add_user, or adduser, instead of add-user. https://stackoverflow.com/questions/10302179/hyphen-underscore-or-camelcase-as-word-delimiter-in-uris recommends hypens, which is why I went with add-user for this proposal.

NOTE: This is NOT really RESTful. A properly RESTful API would be PATCH /api/project/{projId} with the JSON contents of the PATCH request looking something like:

{ 'addUsers': ['username1', 'username2', 'username3'] }

POST /api/v2/project/{projId}/remove-user/{username} - remove membership
NEW: Validates a username/password pair in the POST message, which must be of someone with admin rights to the project (either a project manager or a site admin, for example). If validation successful, removes user from project. If user was not a member of the project, no action is taken, but no error is returned: client code sees this as a successful operation.

TASK: Decide whether API should be removeUser, or remove_user, etc., just as with the add-user API endpoint.

NOTE: This is NOT really RESTful. A properly RESTful API would be PATCH /api/project/{projId} with the JSON contents of the PATCH request looking something like:

{ 'removeUsers': ['username1', 'username2', 'username3'] }

Suggestion from Chris:
DELETE /api/v2/project/{projId}/user/{username} - remove membership
POST /api/v2/project/{projId}/user/{username} - add membership

GET /api/v2/count/users - NEW: Counts user accounts active on the server.

GET /api/v2/count/projects - NEW: Counts all public projects active on the server.

GET /api/v2/count/non-test-projects - NEW: Counts public projects active on the server, minus any whose name starts with “test” (case-insensitive so “Test” or “TEST” will also be excluded from the final count).

DELETE /api/v2/project/{projId} - NEW: Validates a username/password pair in the body of the DELETE request, which must be of someone with admin rights to the project (either a project manager or a site admin, for example). If validation successful, deletes the project (or perhaps archives it, see TASK section for decisions needed).

NOTE: A request body in DELETE requests is allowed by https://tools.ietf.org/html/rfc7231#section-4.3.5, but the spec warns that “[a] payload within a DELETE request message has no defined semantics; sending a payload body on a DELETE request might cause some existing implementations to reject the request.” So if ASP.NET Core doesn’t allow a body on a DELETE request, we’ll have to rethink this. I suspect it will work, though.

TASK: Decide whether to limit project deletion to site admins only. Decide whether projects should ever be truly deleted, or just archived.



TODO: Implement all those endpoints.


type User = {
    Id : int
    Login : string
    HashedPassword : string
    FirstName : string
    LastName : string
    Mail : string
    MailNotification : bool // default true
    Admin : bool // default false
    Status : int // default 1
    LastLoginOn : DateTime option
    Language : string option // 5 chars
    AuthSourceId : int option
    CreatedOn : DateTime option
    UpdatedOn : DateTime option
    Type : string option
}

type Role = {
    Id : int
    Name : string
    Position : int option // Default 1
    Assignable : bool option // Default true
    Builtin : int // Default 0
    Permissions : string option // Long
}

type Projects = {
    Id : int
    Name : string
    Description : string option // Long
    Homepage : string option
    IsPublic : bool // default true
    ParentId : int option
    Projects_Count : int option // default 0
    CreatedOn : DateTime option
    UpdatedOn : DateTime option
    Identifier : string option // 20 chars
    Status : int // default 1
}

type Members = {
    Id : int
    UserId : int // default 0
    ProjectId : int // default 0
    RoleId : int // default 0
    CreatedOn : DateTime option
    MailNotification : bool // default false
}


Desired:

Project types:

unknown
lift
flex
ourword
onestory
test
bloom
adaptit
school


==== MySQL schema ====

CREATE TABLE `users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `login` varchar(30) NOT NULL DEFAULT '',
  `hashed_password` varchar(40) NOT NULL DEFAULT '',
  `firstname` varchar(30) NOT NULL DEFAULT '',
  `lastname` varchar(30) NOT NULL DEFAULT '',
  `mail` varchar(60) NOT NULL DEFAULT '',
  `mail_notification` tinyint(1) NOT NULL DEFAULT '1',
  `admin` tinyint(1) NOT NULL DEFAULT '0',
  `status` int(11) NOT NULL DEFAULT '1',
  `last_login_on` datetime DEFAULT NULL,
  `language` varchar(5) DEFAULT '',
  `auth_source_id` int(11) DEFAULT NULL,
  `created_on` datetime DEFAULT NULL,
  `updated_on` datetime DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4159 DEFAULT CHARSET=utf8;

CREATE TABLE `roles` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) NOT NULL DEFAULT '',
  `position` int(11) DEFAULT '1',
  `assignable` tinyint(1) DEFAULT '1',
  `builtin` int(11) NOT NULL DEFAULT '0',
  `permissions` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

CREATE TABLE `projects` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) NOT NULL DEFAULT '',
  `description` text,
  `homepage` varchar(255) DEFAULT '',
  `is_public` tinyint(1) NOT NULL DEFAULT '1',
  `parent_id` int(11) DEFAULT NULL,
  `projects_count` int(11) DEFAULT '0',
  `created_on` datetime DEFAULT NULL,
  `updated_on` datetime DEFAULT NULL,
  `identifier` varchar(20) DEFAULT NULL,
  `status` int(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2096 DEFAULT CHARSET=utf8;

CREATE TABLE `members` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL DEFAULT '0',
  `project_id` int(11) NOT NULL DEFAULT '0',
  `role_id` int(11) NOT NULL DEFAULT '0',
  `created_on` datetime DEFAULT NULL,
  `mail_notification` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8050 DEFAULT CHARSET=utf8;



===== TEST DATA =====


INSERT INTO `members` (`id`, `user_id`, `project_id`, `role_id`, `created_on`, `mail_notification`) VALUES
(2, 10, 2, 3, '2009-07-27 02:03:33', 0),
(3, 20, 2, 4, '2009-07-27 02:03:33', 0),
(4, 170, 2, 4, '2017-01-02 03:04:55', 0),
(5, 11, 3, 3, '2009-07-27 02:03:33', 0),
(6, 21, 3, 4, '2009-07-27 02:03:33', 0),
(7, 170, 3, 3, '2017-01-02 03-04:55', 0),
(8, 170, 4, 6, '2017-02-02 04-04:55', 0);

INSERT INTO `projects` (`id`, `name`, `description`, `homepage`, `is_public`, `parent_id`, `projects_count`, `created_on`, `updated_on`, `identifier`, `status`) VALUES
(1, 'LD Test', 'LD API Test project', '', 0, NULL, 0, '2009-07-23 09:56:52', '2017-02-24 09:56:52', 'ld-test', 1),
(2, 'LD Test Dictionary', 'LD API Test Dictionary project', '', 1, NULL, 0, '2011-07-24 05:24:19', '2017-02-24 02:33:33', 'test-ld-dictionary', 1),
(3, 'LD API Test Flex', 'LD API Test FLEx project', '', 1, NULL, 0, '2012-09-21 02:44:47', '2017-02-24 02:44:47', 'test-ld-flex', 1),
(4, 'LD API Test Demo', 'LD API Test Demo project', '', 1, NULL, 0, '2013-09-21 02:44:47', '2017-02-24 02:44:47', 'test-ld-demo', 1),
(5, 'LD API Test AdaptIT', 'LD API Test AdaptIT project', '', 1, NULL, 0, '2014-09-21 02:44:47', '2017-02-24 02:44:47', 'test-ld-adapt', 1),
(6, 'LD API Test Training', 'LD API Test Training project', '', 1, NULL, 0, '2015-09-21 02:44:47', '2017-02-24 02:44:47', 'test-ld-training', 1),
(7, 'LD API UTF8 Eñcoding', 'LD API Test UTF8 Eñcoding project', '', 1, NULL, 0, '2016-08-10 07:30:45', '2017-03-01 08:10:20', 'test-ld-ütf8', 1);

INSERT INTO `roles` (`id`, `name`, `position`, `assignable`, `builtin`, `permissions`) VALUES
(1, 'Non member', 1, 1, 1, '--- \n- :add_messages\n- :view_documents\n- :view_files\n- :add_issues\n- :add_issue_notes\n- :save_queries\n- :view_gantt\n- :view_calendar\n- :comment_news\n- :view_time_entries\n- :view_wiki_pages\n- :view_wiki_edits\n'),
(2, 'Anonymous', 2, 1, 2, '--- \n- :view_documents\n- :view_files\n- :view_gantt\n- :view_calendar\n- :view_time_entries\n- :view_wiki_pages\n- :view_wiki_edits\n'),
(3, 'Manager', 3, 1, 0, '--- \n- :edit_project\n- :select_project_modules\n- :manage_members\n- :manage_versions\n- :manage_boards\n- :add_messages\n- :edit_messages\n- :edit_own_messages\n- :delete_messages\n- :delete_own_messages\n- :manage_documents\n- :view_documents\n- :manage_files\n- :view_files\n- :manage_categories\n- :add_issues\n- :edit_issues\n- :manage_issue_relations\n- :add_issue_notes\n- :edit_issue_notes\n- :edit_own_issue_notes\n- :move_issues\n- :delete_issues\n- :manage_public_queries\n- :save_queries\n- :view_gantt\n- :view_calendar\n- :view_issue_watchers\n- :add_issue_watchers\n- :manage_news\n- :comment_news\n- :manage_repository\n- :browse_repository\n- :view_changesets\n- :commit_access\n- :log_time\n- :view_time_entries\n- :edit_time_entries\n- :edit_own_time_entries\n- :rename_wiki_pages\n- :delete_wiki_pages\n- :view_wiki_pages\n- :view_wiki_edits\n- :edit_wiki_pages\n- :delete_wiki_pages_attachments\n- :protect_wiki_pages\n'),
(4, 'Contributer', 4, 1, 0, '--- \n- :manage_versions\n- :add_messages\n- :edit_own_messages\n- :manage_documents\n- :view_documents\n- :manage_files\n- :view_files\n- :manage_categories\n- :add_issues\n- :edit_issues\n- :manage_issue_relations\n- :add_issue_notes\n- :edit_own_issue_notes\n- :save_queries\n- :view_gantt\n- :view_calendar\n- :view_issue_watchers\n- :manage_news\n- :comment_news\n- :browse_repository\n- :view_changesets\n- :commit_access\n- :log_time\n- :view_time_entries\n- :rename_wiki_pages\n- :delete_wiki_pages\n- :view_wiki_pages\n- :view_wiki_edits\n- :edit_wiki_pages\n- :delete_wiki_pages_attachments\n- :protect_wiki_pages\n'),
(5, 'Obv - do not use', 5, 1, 0, '--- \n- :add_messages\n- :edit_own_messages\n- :view_documents\n- :view_files\n- :add_issues\n- :add_issue_notes\n- :save_queries\n- :view_gantt\n- :view_calendar\n- :comment_news\n- :browse_repository\n- :view_changesets\n- :log_time\n- :view_time_entries\n- :view_wiki_pages\n- :view_wiki_edits\n'),
(6, 'LanguageDepotProgrammer', 6, 1, 0, '--- \n- :add_messages\n- :view_documents\n- :view_files\n- :add_issues\n- :add_issue_notes\n- :save_queries\n- :view_gantt\n- :view_calendar\n- :comment_news\n- :browse_repository\n- :view_changesets\n- :view_time_entries\n');

INSERT INTO `users` (`id`, `login`, `hashed_password`, `firstname`, `lastname`, `mail`, `mail_notification`, `admin`, `status`, `last_login_on`, `language`, `auth_source_id`, `created_on`, `updated_on`, `type`) VALUES
(1, 'admin', '5857a28060d630a5ed9e0bfd4e6e17a76fa41b79', 'Admin', 'User', 'admin@example.net', 0, 1, 1, '2009-07-23 08:44:48', 'en', NULL, '2009-07-22 06:32:07', '2009-07-23 08:45:37', NULL),
(10, 'manager1', 'bc852d2e71e76cf734e3a4b74619bc28d867c8bd', 'Manager1', 'User', 'manager1@example.net', 0, 0, 1, '2009-07-23 08:44:48', 'en', NULL, '2009-07-22 06:32:07', '2009-07-23 08:45:37', NULL),
(11, 'manager2', '5857a28060d630a5ed9e0bfd4e6e17a76fa41b79', 'Manager2', 'User', 'manager2@example.net', 0, 0, 1, '2009-07-23 08:44:48', 'en', NULL, '2009-07-22 06:32:07', '2009-07-23 08:45:37', NULL),
(20, 'user1', '02484720fe235a6fa352ffa0d5dac80897008ec0', 'User', 'One', 'user1@example.net', 0, 0, 1, '2015-10-16 09:08:39', 'en', NULL, '2009-07-23 08:40:51', '2015-10-16 09:08:39', NULL),
(21, 'user2', '3dd4ba95e5e68cd43d430a1a2d74a9ce75957be9', 'User', 'Two', 'user2@example.net', 0, 0, 1, '2015-10-16 09:08:39', 'en', NULL, '2009-07-23 08:40:51', '2015-10-16 09:08:39', NULL),
(22, 'Upper', '721c93a8a9238620123d3bcfa670ce56', 'Upper', 'Case', 'UPPER@example.net', 0, 0, 1, '2015-10-21 09:08:39', 'en', NULL, '2015-10-16 09:08:39', '2015-10-16 09:08:39', NULL),
(30, 'modify', '9f37b795e5468cdf3e4a0a4a2d54698e056556e7', 'Modify', 'User', 'modify@example.net', 0, 0, 1, '2015-10-16 09:08:39', 'en', NULL, '2009-07-23 08:40:51', '2015-10-16 09:08:39', NULL),
(170, 'test', 'd8bebbafb32fbb0545773ce30dbcfb29e7573050', 'Test', 'Palaso', 'Test@example.net', 0, 0, 1, '2015-10-16 09:08:39', 'en', NULL, '2010-09-09 03:29:15', '2012-08-30 09:49:02', NULL);
